[{"content":"","date":"2025-06-01","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2025-06-01","externalUrl":null,"permalink":"/categories/java/","section":"Categories","summary":"","title":"Java","type":"categories"},{"content":" Java是解释执行吗？ # Java 的执行过程实际上是一个混合的过程，既包含编译也包含解释。以下是对 Java 执行过程的详细解释：\n源代码编写: 开发者使用 Java 语言编写源代码，文件扩展名为 .java。\n编译: 使用 Java 编译器（javac）将 Java 源代码编译成字节码（bytecode），字节码文件的扩展名为 .class。这个过程是将高层次的 Java 代码转换为一种中间表示形式，字节码是与平台无关的。\n解释执行 Java 字节码并不是直接在操作系统上运行的，而是通过 Java 虚拟机（JVM）来执行。JVM 会将字节码解释为机器代码并执行。这个过程可以是解释执行，也可以是即时编译（JIT，Just-In-Time Compilation）。\n解释执行: 在某些情况下，JVM 会逐行解释字节码并执行。 即时编译（JIT）: 为了提高性能，JVM 还会将热点代码（频繁执行的代码）编译为本地机器代码，这样可以提高执行效率。 因此，Java 既不是纯粹的解释执行，也不是纯粹的编译执行。它结合了编译和解释的优点：\n编译: 将源代码编译为字节码。 解释: 通过 JVM 解释执行字节码。 JIT 编译: 在运行时将部分字节码编译为本地机器代码以提高性能。 Java基础概念 # ","date":"2025-06-01","externalUrl":null,"permalink":"/posts/java-summary/","section":"Posts","summary":"","title":"Java Summary","type":"posts"},{"content":"","date":"2025-06-01","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2025-06-01","externalUrl":null,"permalink":"/","section":"Regina写作练习","summary":"","title":"Regina写作练习","type":"page"},{"content":"","date":"2023-01-12","externalUrl":null,"permalink":"/categories/hugo/","section":"Categories","summary":"","title":"Hugo","type":"categories"},{"content":" - 添加「关于About」页面 # 新建/content/about文件夹，文件夹内新建index.md文件；在文件内填写想要展示的内容即可。\n- 文章git commit记录显隐 # config.toml中设置\n# 是否使用 git 信息 enableGitInfo = false ","date":"2023-01-12","externalUrl":null,"permalink":"/posts/theme-customization/","section":"Posts","summary":"","title":"Hugo LoveIt主题美化","type":"posts"},{"content":"","date":"2023-01-10","externalUrl":null,"permalink":"/categories/cpp/","section":"Categories","summary":"","title":"Cpp","type":"categories"},{"content":"","date":"2023-01-10","externalUrl":null,"permalink":"/posts/cpp-new-features/","section":"Posts","summary":"","title":"高版本C++特性总结","type":"posts"},{"content":" Item 1: 将 C++ 视为 federation of languages（语言联合体） # 将C++看作亲族语言的联合体：\nC：C++是基于C的，比如blocks（模块）、statements（语句）、preprocessor（预处理器）、built-in data types（内建数据类型）、arrays（数组）、pointers（指针）等等。 Object-Oriented C++：面向对象的规则，比如classes（类）（包括构造函数和析构函数）、encapsulation（封装）、inheritance（继承）、polymorphism（多态）、virtual functions（虚函数）、 dynamic binding（动态绑定）等等。 Template C++：泛型编程，template metaprogramming (TMP) （模板元编程）。 STL：模版库，包括containers（容器）、iterators（迭代器）等等。 使用 built-in（内建）（也就是说，C-like（类 C 的））类型时，pass-by-value（传值）通常比 pass-by-reference（传引用）更高效，但是当你从 C++ 的 C 部分转到 Object-Oriented C++（面向对象 C++），user-defined constructors（用户自定义构造函数）和 destructors（析构函数）意味着，通常情况下，更好的做法是 pass-by-reference-to-const（传引用给 const）。在 Template C++ 中工作时，这一点更加重要，因为，在这种情况下，你甚至不知道你的操作涉及到的 object（对象）的类型。然而，当你进入 STL，你知道 iterators（迭代器）和 function objects（函数对象）以 C 的 pointers（指针）为原型，对于 STL 中的 iterators（迭代器）和 function objects（函数对象），古老的 C 中的 pass-by-value（传值）规则又重新生效。\nItem 2: 用const、enum和inline取代#define # #define 在preprocessor（预处理器）中处理，const、enum和inline在compiler（编译器）中处理，所以也可以说用compiler（编译器）取代preprocessor（预处理器）。\n原因：\n例如定义了 #define ASPECT_RATIO 1.653\n预处理器处理了ASPECT_RATIO这个变量，编译的时候ASPECT_RATIO可能就不会被加入符号表。在编译报错或者调试的时候信息可能会会用 1.653代替了ASPECT_RATIO，导致增加了排查难度。\n解决方案：\n使用常量const代替宏定义#define。const double AspectRatio = 1.653;\n因为语言层面的常量const会被编译器识别并加入符号表；并且对于这个例子的浮点数来说，使用常量const比使用宏定义#define能产生更小的代码。\n","date":"2022-12-14","externalUrl":null,"permalink":"/posts/effective-cpp/","section":"Posts","summary":"","title":"Effective C++ 阅读记录","type":"posts"},{"content":" 1. Github创建图床仓库 # 1.1 GitHub新建仓库用于存放图片\n1.2 GitHub新建Token，权限选择repo、write:packages、delete:packages、admin:org、admin:public_key、admin:repo_hook、project\n2. PicGo-Core安装和设置 # 2.1 安装Node.js\nbrew install node 2.2 安装PicGo-Core\n// 全局安装 npm install picgo -g 2.3 修改PicGo-Core配置文件\n通过以下命令进入交互式命令行，设置GitHub仓库名、分支名、token等信息。\npicgo set uploader 或修改配置文件设置picBed，macOS默认配置文件位置为~/.picgo/config.json。\n2.4 使用时间戳\n安装插件\npicgo install super-prefix 2.5 上传测试\n使用picgo upload xxx.png上传图片，显示PicGo SUCCESS\n","date":"2022-11-10","externalUrl":null,"permalink":"/posts/picgo-github/","section":"Posts","summary":"","title":"Picgo + github搭建图床","type":"posts"},{"content":" 1. 准备工作 # 1.1 新建GitHub仓库 # 新建仓库名称为username.github.io格式，并选择默认的Public。\n1.2 购买域名 # 在Cloudflare注册账号，选择注册域名，搜索想注册的域名然后购买完成注册。\n1.3 域名托管 # 选择Websites里面的域名进入域名管理页面，添加DNS记录，选择CNAME，添加子域名www，指向GitHub Pages地址。\n2. GitHub Pages托管 # 2.1 修改本地配置 # 修改本地站点配置quickstart/config.toml，将baseURL改为自己的域名。\nbaseURL = \u0026#39;https://www.regina23.com/\u0026#39; languageCode = \u0026#39;zh-cn\u0026#39; title = \u0026#34;Regina23\u0026#39;s Blog\u0026#34; theme = \u0026#34;LoveIt\u0026#34; 2.2 本地仓库关联到远程仓库 # Hugo 默认将生成的静态网页文件存放在 qiuckstart/public/ 目录下，将该目录初始化，并关联到远程仓库。\ncd qiuckstart/public git init git remote add origin git@github.com:regina23/regina23.github.io.git 本地构建并检查文章内容，无误后推送到远程仓库。\ncd qiuckstart hugo hugo server git add . git commit -m \u0026#34;add pages\u0026#34; git push origin master 2.2 远程仓库设置域名 # 进入1.1新建的GitHub仓库，在Settings -\u0026gt; Pages确认部署的分支并保存，然后配置自定义域名并保存。\n此时，打开域名网址可以看到博客以及部署上去了。\n3. GitHub Actions自动发布 # 3.1 新建远程仓库和Hugo根目录关联 # GitHubPages托管+手动发布静态文件比较繁琐，因此选择GitHub Action进行自动化发布。\n新建仓库，例如regina23.github.io.source，将本地Hugo根目录qiuckstart关联到该仓库并推送。\ncd qiuckstart git init git remote add origin git@github.com:regina23/regina23.github.io.source.git git add . git commit -m \u0026#34;init\u0026#34; git push origin master 3.2 配置GitHub Actions # 在远程仓库新建GitHub Actions-\u0026gt;Hugo，会在目录/.github/workflows/下，以.yml为后缀新建配置文件。\n本质是根目录更新时同时推送到GitHub Pages仓库，所以需要修改外部仓库地址为EXTERNAL_REPOSITORY: regina23/regina23.github.io，对应根目录的./public目录。 name: deploy on: push: workflow_dispatch: jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;0.105.0\u0026#34; extended: true - name: Build Web run: hugo --minify - name: Deploy Web uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} EXTERNAL_REPOSITORY: regina23/regina23.github.io PUBLISH_BRANCH: master PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} 此外，从博客仓库推送到外部 GitHub Pages 仓库，需要特定权限，在GitHub账户下Settings-\u0026gt;Developer settings-\u0026gt;Personal access tokens (classic)，新建token，权限选择repo和workflow。\n复制生成的TOKEN，在博客源仓库Settings-\u0026gt;Secrets-\u0026gt;Actions新建名称为PERSONAL_TOKEN内容为TOKEN的变量。\n3.3 测试 # 完成后，本地根目录推送到远程源代码仓库，即可触发GitHub Actions，自动生成Hugo博客页面并推送到GitHub Pages仓库，然后部署发布到网站。\n如果出现报错：No url found for submodule path '.public' # 需要将public模块和根目录关联，在qiuckstart/.gitmodules添加：\n[submodule \u0026#34;public\u0026#34;] path = public url = https://github.com/regina23/regina23.github.io.git ","date":"2022-11-03","externalUrl":null,"permalink":"/posts/hugo-deployment/","section":"Posts","summary":"","title":"Hugo博客自动部署","type":"posts"},{"content":"官方文档：Quick Start\n1. 安装Hugo # brew install hugo hugo version 2. 创建一个新的网站 # hugo new site quickstart 创建了quickstart的目录，目录结构为：\n├── archetypes │ └── default.md ├── config.toml # 配置文件 ├── content # 文章所在目录 ├── data ├── layouts # 网站布局 ├── static # 静态内容 └── themes # 博客主题 3. 添加主题 # 主题参见themes，下载主题并添加到配置文件，注意主题所在文件夹和配置中名称对应。\ncd quickstart git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt echo theme = \\\u0026#34;LoveIt\\\u0026#34; \u0026gt;\u0026gt; config.toml 4. 新建内容页 # 新建文章可以手动添加文件至/content/posts/目录，也可以使用new命令。 文章draft: true表示草稿，不会被部署；文章完成后修改为draft: false。\nhugo new posts/my-first-post.md 其中文章主要结构包括属性和正文，属性主要有：\n--- title: # 文章标题 author: # 文章作者 description : # 文章描述信息 date: # 文章编写日期 lastmod: # 文章修改日期 tags = [ # 文章所属标签 \u0026#34;文章标签1\u0026#34;, \u0026#34;文章标签2\u0026#34; ] categories = [ # 文章所属标签 \u0026#34;文章分类1\u0026#34;, \u0026#34;文章分类2\u0026#34;, ] keywords = [ # 文章关键词 \u0026#34;Hugo\u0026#34;, \u0026#34;static\u0026#34;, \u0026#34;generator\u0026#34;, ] next: /posts/next # 下一篇博客地址 prev: /posts/prev # 上一篇博客地址 --- 5. 启动Hugo服务 # -D表示草稿也会被加载，浏览器访问http://localhost:1313/即可看到网站。\nhugo server -D 6. 修改模版配置 # 修改新建文档的初始化配置archetypes/defeault.md：\n--- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; author: [\u0026#34;Regina23\u0026#34;] date: {{ .Date }} lastmod: {{ .Date }} draft: true --- 7. 修改项目配置 # 修改config.toml，可参考/themes/LoveIt/exampleSite/config.toml\nbaseURL = \u0026#39;https://www.regina23.com/\u0026#39; languageCode = zh-cn title = \u0026#34;Regina23\u0026#39;s Blog\u0026#34; theme = \u0026#34;LoveIt\u0026#34; ","date":"2022-11-02","externalUrl":null,"permalink":"/posts/hugo-setup/","section":"Posts","summary":"","title":"Hugo博客搭建","type":"posts"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","externalUrl":null,"permalink":"/about/","section":"Regina写作练习","summary":"","title":"关于我","type":"page"}]